# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  password: PasswordState
  email: String
  links(where: ShortenedLinkWhereInput! = {}, orderBy: [ShortenedLinkOrderByInput!]! = [], take: Int, skip: Int! = 0): [ShortenedLink!]
  linksCount(where: ShortenedLinkWhereInput! = {}): Int
  createdAt: DateTime
  role: Role
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  links: ShortenedLinkManyRelationFilter
  createdAt: DateTimeNullableFilter
  role: RoleWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ShortenedLinkManyRelationFilter {
  every: ShortenedLinkWhereInput
  some: ShortenedLinkWhereInput
  none: ShortenedLinkWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  password: String
  email: String
  links: ShortenedLinkRelateToManyForUpdateInput
  createdAt: DateTime
  role: RoleRelateToOneForUpdateInput
}

input ShortenedLinkRelateToManyForUpdateInput {
  disconnect: [ShortenedLinkWhereUniqueInput!]
  set: [ShortenedLinkWhereUniqueInput!]
  create: [ShortenedLinkCreateInput!]
  connect: [ShortenedLinkWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  password: String
  email: String
  links: ShortenedLinkRelateToManyForCreateInput
  createdAt: DateTime
  role: RoleRelateToOneForCreateInput
}

input ShortenedLinkRelateToManyForCreateInput {
  create: [ShortenedLinkCreateInput!]
  connect: [ShortenedLinkWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type ShortenedLink {
  id: ID!
  originalURL: String
  shortenedURL: String
  isPrivate: Boolean
  privatePass: String
  owner: User
  clicks: Int
  createdAt: DateTime
}

input ShortenedLinkWhereUniqueInput {
  id: ID
  shortenedURL: String
}

input ShortenedLinkWhereInput {
  AND: [ShortenedLinkWhereInput!]
  OR: [ShortenedLinkWhereInput!]
  NOT: [ShortenedLinkWhereInput!]
  id: IDFilter
  originalURL: StringFilter
  shortenedURL: StringFilter
  isPrivate: BooleanFilter
  privatePass: StringFilter
  owner: UserWhereInput
  clicks: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ShortenedLinkOrderByInput {
  id: OrderDirection
  originalURL: OrderDirection
  shortenedURL: OrderDirection
  isPrivate: OrderDirection
  privatePass: OrderDirection
  clicks: OrderDirection
  createdAt: OrderDirection
}

input ShortenedLinkUpdateInput {
  originalURL: String
  shortenedURL: String
  isPrivate: Boolean
  privatePass: String
  owner: UserRelateToOneForUpdateInput
  clicks: Int
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ShortenedLinkUpdateArgs {
  where: ShortenedLinkWhereUniqueInput!
  data: ShortenedLinkUpdateInput!
}

input ShortenedLinkCreateInput {
  originalURL: String
  shortenedURL: String
  isPrivate: Boolean
  privatePass: String
  owner: UserRelateToOneForCreateInput
  clicks: Int
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canDeleteLink: Boolean
  canManageAllLinks: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  canUseAdminUI: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canDeleteLink: BooleanFilter
  canManageAllLinks: BooleanFilter
  canSeeOtherPeople: BooleanFilter
  canEditOtherPeople: BooleanFilter
  canManagePeople: BooleanFilter
  canManageRoles: BooleanFilter
  canUseAdminUI: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canDeleteLink: OrderDirection
  canManageAllLinks: OrderDirection
  canSeeOtherPeople: OrderDirection
  canEditOtherPeople: OrderDirection
  canManagePeople: OrderDirection
  canManageRoles: OrderDirection
  canUseAdminUI: OrderDirection
}

input RoleUpdateInput {
  name: String
  canDeleteLink: Boolean
  canManageAllLinks: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  canUseAdminUI: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canDeleteLink: Boolean
  canManageAllLinks: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  canUseAdminUI: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createShortenedLink(data: ShortenedLinkCreateInput!): ShortenedLink
  createShortenedLinks(data: [ShortenedLinkCreateInput!]!): [ShortenedLink]
  updateShortenedLink(where: ShortenedLinkWhereUniqueInput!, data: ShortenedLinkUpdateInput!): ShortenedLink
  updateShortenedLinks(data: [ShortenedLinkUpdateArgs!]!): [ShortenedLink]
  deleteShortenedLink(where: ShortenedLinkWhereUniqueInput!): ShortenedLink
  deleteShortenedLinks(where: [ShortenedLinkWhereUniqueInput!]!): [ShortenedLink]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  generateShortenedURL(url: String!, isPrivate: Boolean, privatePass: String): ShortenedLink
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  shortenedLinks(where: ShortenedLinkWhereInput! = {}, orderBy: [ShortenedLinkOrderByInput!]! = [], take: Int, skip: Int! = 0): [ShortenedLink!]
  shortenedLink(where: ShortenedLinkWhereUniqueInput!): ShortenedLink
  shortenedLinksCount(where: ShortenedLinkWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  getURL(urlID: String!, privatePass: String): ShortenedLink
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
